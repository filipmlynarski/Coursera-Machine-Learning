h1_2 = [[ones(m, 1) X] * Theta1'];
h1 = sigmoid(h1_2);
h_2 = [[ones(m, 1) h1] * Theta2'];
h = sigmoid(h_2);
for i = 1:m
  for k = 1:num_labels
    J += -(y(i) == k) * log(h(i, :)(k)) - (1 - (y(i) == k)) * log(1 - h(i, :)(k));
    end;
  end;
J /= m;

reg = 0;
for j = 1:hidden_layer_size
  for k = 2:input_layer_size + 1
    reg += Theta1(j, :)(k) ^ 2;
    end
  end
for j = 1:num_labels
  for k = 2:hidden_layer_size + 1
    reg += Theta2(j, :)(k) ^ 2;
    end
  end

J += (lambda/(2 * m)) * reg;


delta1 = zeros(size(Theta1));
delta2 = zeros(size(Theta2));
y2 = zeros(m, num_labels);

for i = 1:m
  y2(i, y(i)) = 1;
end

a1 = [ones(m, 1) X];
z2 = a1 * Theta1';
a2 = [ones(size(z2), 1) sigmoid(z2)];
z3 = a2 * Theta2';
a3 = sigmoid(z3);

error3 = a3 - y2;
error2 = error3 * Theta2 .* sigmoidGradient([ones(size(z2), 1) z2]);
error2 = error2(:, 2: end);

delta1 += error2' * a1;
delta2 += error3' * a2;


Theta1_grad(:, 2:end) = 1/m * delta1(:, 2:end) + (lambda/m) * Theta1(:, 2:end);
Theta1_grad(:, 1) = 1/m * delta1(:, 1);
Theta2_grad(:, 2:end) = 1/m * delta2(:, 2:end) + (lambda/m) * Theta2(:, 2:end);
Theta2_grad(:, 1) = 1/m * delta2(:, 1);

